package array.sorting;public class SortingExample {    public static void main(String[] args){    }    /**     *The selection sort algorithm sorts an array by repeatedly finding the minimum element     * (considering ascending order) from unsorted part and putting it at the beginning.     * The algorithm maintains two subarrays in a given array.     */    private void selectionShort(int[] arr){        int n = arr.length;        // One by one move boundary of unsorted subarray        for (int i = 0; i < n-1; i++)        {            // Find the minimum element in unsorted array            int min_idx = i;            for (int j = i+1; j < n; j++)                if (arr[j] < arr[min_idx])                    min_idx = j;            // Swap the found minimum element with the first            // element            int temp = arr[min_idx];            arr[min_idx] = arr[i];            arr[i] = temp;        }    }    /**     * Bubble Sort is the simplest sorting algorithm that works by repeatedly swapping the adjacent elements if they are in wrong order.     * @param arr     */    private void bubbleSort(int[] arr){        int size = arr.length;        int temp;        for(int i = 0; i< size - 1; i++){            for(int j = 0; j< size - i-  1; j++){                if(arr[j] > arr[j+1]){                    temp = arr[j];                    arr[j]  = arr[j+1];                    arr[j+1] = temp;                }            }        }    }    /**     *Insertion sort     */    private void insertionSort(int[] arr){            int n = arr.length;            for (int i = 1; i < n; ++i) {                int key = arr[i];                int j = i - 1;            /* Move elements of arr[0..i-1], that are               greater than key, to one position ahead               of their current position */                while (j >= 0 && arr[j] > key) {                    arr[j + 1] = arr[j];                    j = j - 1;                }                arr[j + 1] = key;            }    }    // Merges two subarrays of arr[].    // First subarray is arr[l..m]    // Second subarray is arr[m+1..r]    void merge(int arr[], int l, int m, int r)    {        // Find sizes of two subarrays to be merged        int n1 = m - l + 1;        int n2 = r - m;        /* Create temp arrays */        int L[] = new int[n1];        int R[] = new int[n2];        /*Copy data to temp arrays*/        for (int i = 0; i < n1; ++i)            L[i] = arr[l + i];        for (int j = 0; j < n2; ++j)            R[j] = arr[m + 1 + j];        /* Merge the temp arrays */        // Initial indexes of first and second subarrays        int i = 0, j = 0;        // Initial index of merged subarry array        int k = l;        while (i < n1 && j < n2) {            if (L[i] <= R[j]) {                arr[k] = L[i];                i++;            }            else {                arr[k] = R[j];                j++;            }            k++;        }        /* Copy remaining elements of L[] if any */        while (i < n1) {            arr[k] = L[i];            i++;            k++;        }        /* Copy remaining elements of R[] if any */        while (j < n2) {            arr[k] = R[j];            j++;            k++;        }    }    // Main function that sorts arr[l..r] using    // merge()    void mergeSort(int arr[], int l, int r)    {        if (l < r) {            // Find the middle point            int m =l+ (r-l)/2;            // Sort first and second halves            mergeSort(arr, l, m);            mergeSort(arr, m + 1, r);            // Merge the sorted halves            merge(arr, l, m, r);        }    }    /**     * Quick sort     * Like Merge Sort, QuickSort is a Divide and Conquer algorithm.     * It picks an element as pivot and partitions the given array around the picked pivot.     * There are many different versions of quickSort that pick pivot in different ways.     *     * Always pick first element as pivot.     * Always pick last element as pivot (implemented below)     * Pick a random element as pivot.     * Pick median as pivot.     */    //Quick Sort Logic    void quickSort(  int list[] ,int first,int last){        int pivot,i,j,temp;        if(first < last){            pivot = first;            i = first;            j = last;            while(i < j){                while(list[i] <= list[pivot] && i < last)                    i++;                while(list[j] && list[pivot])                    j--;                if(i < j){                    temp = list[i];                    list[i] = list[j];                    list[j] = temp;                }            }            temp = list[pivot];            list[pivot] = list[j];            list[j] = temp;            quickSort(list,first,j-1);            quickSort(list,j+1,last);        }    }    private void printArray(int[] arr){        for (int j : arr) {            System.out.print(j);        }    }}